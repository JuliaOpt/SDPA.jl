using BinaryProvider # requires BinaryProvider 0.3.0 or later
using CxxWrap

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "sdpa", :sdpa),
    LibraryProduct(prefix, ["libsdpa"], :libsdpa),
    LibraryProduct(prefix, ["libsdpawrap"], :libsdpawrap),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaOpt/SDPABuilder/releases/download/v7.3.8-1-static"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc7-cxx11.tar.gz", "9e65819fc7b15af1bcf0a264dfd09c0f94a0e44a8c3848a1bd9a532f6a32706d"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc8-cxx11.tar.gz", "a114c79bca889551a769854ba9fddfa602b2cd32887b3797ab1f578dbedd693d"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-apple-darwin14-gcc7.tar.gz", "bc8caf92c991ee656d6c646496e55e1f3ac2afa06150e0860180012af36b2e2a"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-apple-darwin14-gcc8.tar.gz", "9c2cdb3fa780e598ba2a9bd0ae4f920f1f19d4a7f5c254bd6bc3e6a718845a03"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "239fdbf572aa77cde14de1e906b19b105578071da56dd397ef9ccd57e013619a"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "6fce163dd14001a1d87a7ad7a35db5265c1c1b76631f2a43cd9c2b218fa4a17c"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "40f85f440c7c4054ca970b4318053b1513192a7b178841946e39a8fed55500e4"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "c9f913a1c37e78aeb2d48fdb2b3752c7b03b0bd5b48f618bb5552cfe2e19b578"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
