using BinaryProvider # requires BinaryProvider 0.3.0 or later
using CxxWrap

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "sdpa", :sdpa),
    LibraryProduct(prefix, ["libsdpa"], :libsdpa),
    LibraryProduct(prefix, ["libsdpawrap"], :libsdpawrap),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaOpt/SDPABuilder/releases/download/v7.3.8-1-static"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc6, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc6-cxx11.tar.gz", "9b4762919b6741e20c00ec0972fbe2def744b6bd7da4a00776206129e06e7172"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc7-cxx11.tar.gz", "6f516c6f5b8bbde22dff7775cc117adb44b45dd61f80205380af48d69d24c165"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc8-cxx11.tar.gz", "30614995c3f8e368803be6e812e99c644c136ebae210b843ef49d9f06a249ec6"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc6)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-apple-darwin14-gcc6.tar.gz", "4992e1553734ceed7f2b5d94b1db0b6c1b3f627fe3943801a703f73aad00bdb5"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-apple-darwin14-gcc7.tar.gz", "98b57fb52fe19fae9ac058740096a4d718f14c499edd2481e330073eb3553ae7"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-apple-darwin14-gcc8.tar.gz", "decd91fb96c0334fee3eac41f06326a879ab04385e0a4cc7e399d8743920f0d2"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc6, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc6-cxx11.tar.gz", "3e4f0362e54f376672cee11e234e63a8020bc4d6e905f947f1de91ae05a1092a"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "eade626e76525c620ea0469920986f834250a41ea2c361f33349c4991050fb5e"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "8e3f932c9d9f10bd9fdf35de86d20d59ffab0d2e43600cc1089b107127a05f8f"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc6, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc6-cxx11.tar.gz", "52421f20beb875d1e2fac0d5567ceb80de39bbfda3dba85e85db596a65de1e11"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "78d90ca04235f4e1413926d421f475148d4de5b0897d982685dcd9b39360a7fa"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "fe111719d681ed2b4a4f0c28fa9f03dca9c6e39035e26daa3dde0d46d2380d30"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
this_platform = platform_key_abi()
if typeof(this_platform)==Windows && this_platform.compiler_abi.gcc_version == :gcc4
   this_platform = Windows(arch(this_platform), libc=libc(this_platform), compiler_abi=CompilerABI(:gcc6))
end
dl_info = choose_download(download_info,  this_platform)
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
