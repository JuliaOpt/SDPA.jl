using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "sdpa", :sdpa),
    LibraryProduct(prefix, ["libsdpa"], :libsdpa),
    LibraryProduct(prefix, ["libsdpawrap"], :libsdpawrap),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaOpt/SDPABuilder/releases/download/v7.3.8-1-static"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Windows(:i686, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc7-cxx11.tar.gz", "10efc5044041dec14d9d6bf98a1cbd726d5e3c6501fde2282803fbf370728aee"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.i686-w64-mingw32-gcc8-cxx11.tar.gz", "f1f08635c0f1dc9ad03853b7a658cb50b6603d7361d539af3a92a57f9d76e8cd"),
    MacOS(:x86_64) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-apple-darwin14.tar.gz", "36ea9da667663452f8adf2f224f8448cbda8023c8a8528d7b1f1be98d9caa69a"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc7-cxx11.tar.gz", "79f87bbfb2079331e205c1e0ddc2c2c4c8af89db91e907b6c40287ed68bed322"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-linux-gnu-gcc8-cxx11.tar.gz", "3519f9ed67f162b18760a6a266debd99131c6919b8e6787299071ce5154e7b87"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc7-cxx11.tar.gz", "f0c4649efd8553147ba2cd754cd7ac476a6370763094a0a6a899c75d4cc02472"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8, :cxx11)) => ("$bin_prefix/SDPABuilder.v7.3.8.x86_64-w64-mingw32-gcc8-cxx11.tar.gz", "5f5ec685ca2bf3d3620ddd1a266b86a70bcc3812ca1d185e8b4bafc16cc65a9c"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
